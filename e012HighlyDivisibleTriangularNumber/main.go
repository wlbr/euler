/*
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


Answer: 76576500

*/

package main

import (
	"fmt"
	"math"
)

func genNthTriangularNumber(nth int) (result int) {
	for i := 1; i <= nth; i++ {
		result += i
	}
	return result
}

func genNthTriangularNumberFromLast(last, nth int) int {
	return last + nth
}

func eras(max int) (nums []bool) {
	nums = make([]bool, max)
	nums[1] = true

	for i := 2; i < max; i++ {
		if nums[i] == false {
			for j := i * i; j < max; j += i {
				nums[j] = true
			}
		}
	}
	return nums
}

// quadratic, to slow
func getFactors(num int) (result []int) {
	for i := 1; i <= num/2; i++ {
		if num%i == 0 {
			result = append(result, i)
		}
	}
	result = append(result, num)
	return result
}

//returns prime numbers until the number max + the number 1
func getPrims(max int) []int {
	nums := eras(max)
	var prims []int

	for p, y := range nums {
		if !y {
			prims = append(prims, p)
		}
	}
	prims[0] = 1
	return prims
}

//returns tupels of primfactors and their occurance
func getPrimeFactors(prims []int, n int) (result [][]int) {
	lres := make(map[int]int)
	sqr := n / 2

	for v := 2; v < len(prims); {
		if n%v == 0 {
			lres[v] = lres[v] + 1
			n = n / v
		} else {
			v++
		}
		if v > sqr {
			break
		}
	}
	for k, v := range lres {
		t := []int{k, v}
		result = append(result, t)
	}
	return result
}

//is based on the formular: number of divisors = product of occurence of (each primfact+1)
func getNumberOfDivisors(n int) int {
	prims := getPrims(int(math.Sqrt(float64(n))) + 1)
	prfacts := getPrimeFactors(prims, n)
	prod := 1
	for _, pa := range prfacts {
		prod = prod * (pa[1] + 1)
	}
	return prod
}

func main() {
	found, last, tri := 0, 0, 0
	for nth := 1; found == 0; nth++ {
		tri = genNthTriangularNumberFromLast(last, nth)
		last = tri
		numd := getNumberOfDivisors(tri)
		//fmt.Printf("%dnth Tri Number = %d has %d divisors.\n", nth, tri, numd)
		if numd > 500 {
			found = tri
		}
	}
	fmt.Println(found)
}
